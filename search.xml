<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深度学习记录——X-Anylabeling自动标注</title>
      <link href="/2024/10/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94X-Anylabeling%E8%87%AA%E5%8A%A8%E6%A0%87%E6%B3%A8/"/>
      <url>/2024/10/26/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94X-Anylabeling%E8%87%AA%E5%8A%A8%E6%A0%87%E6%B3%A8/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1><span id="前言">前言：</span></h1><p>因为做项目经常接触数据标注和数据预标注，所以就想如果能将标注和预标注的功能集成，做一个可视化界面，那真是提升效率一大福音；当我还在做思想巨人的时候，已经有大佬实现了，着实佩服；好好好，又可以白嫖了。</p><h1><span id="步骤">步骤：</span></h1><p>源码地址：<a href="https://github.com/CVHub520/X-AnyLabeling">https://github.com/CVHub520/X-AnyLabeling</a></p><h2><span id="1-常规标注">1、常规标注</span></h2><p>这部分就不赘述了，打开文件，然后标注即可，和labelimg类似。</p><h2><span id="2-预训练模型标注">2、预训练模型标注</span></h2><p>详细步骤：</p><ul><li>点击左侧菜单栏第一个文件夹形状的图标，打开想要标注的图片文件夹；<img src="文件夹图标.png" style="zoom:33%;"></li><li>点击左侧菜单栏的倒数第二个图标AI按钮；<img src="AI图标.png" style="zoom:30%;"></li><li>在菜单栏下面会出现选择模型的选择栏，在该选择栏中选择所需功能的预训练模型，选择后会进行自动下载预训练权重，如果显示下载失败可以手动下载，下载地址在工程X-AnyLabeling-main\anylabeling\configs\auto_labeling下的.yaml配置文件中，选择对应模型的配置文件并双击打开，复制model_path后面的网址到浏览器即可下载，下载后将model_path改为存放下载权重的地址；</li><li>点击加载模型框边上的运行按钮，即可实现对当前图片的自动预标注；<img src="运行按钮.png" style="zoom: 33%;"></li><li>若想对打开文件夹里的图片进行批量自动预标注，则在完成上述操作后点击左侧菜单栏最后一个播放图标。<img src="运行图标.png" style="zoom:30%;"></li></ul><h2><span id="3-自训练模型预标注">3、自训练模型预标注</span></h2><p>前提：自己训练的模型必须是XAnylabeling支持的模型，比如yolo11检测目前只支持s模型。（具体可查看配置文件）</p><p>详细步骤：</p><ul><li>将自己训练的模型转为onnx格式；</li><li>在配置文件路径下，复制自训练的模型配置文件，双击打开，修改model_path为自训练转化的onnx存放地址，并修改相关类别。</li><li>后续操作和功能2相同。</li></ul><p><img src="%E7%95%8C%E9%9D%A2.png" alt="加载模型并自动标注界面"></p><center>加载模型并自动标注界面</center><h1><span id="需求侠上身">需求侠上身：</span></h1><p>一点衍生，希望之后可以在大佬开源代码的基础上进行实现。</p><h2><span id="1-一键训练功能">1、一键训练功能</span></h2><p>可以将一站式训练平台的思路也添加到上述界面中，这样针对大模型、预训练模型第一次进行自动标注不准的时候，可以标注一部分数据就一键微调模型，通过不断优化模型可得到数据定制化模型和准确的标注信息。</p><h2><span id="2-标注格式转换功能">2、标注格式转换功能</span></h2><p>当前得到的标注信息是以json格式存储，可在上述界面中添加json格式转化为不同标注存储格式的按钮。</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt入门3——构建一个检测可视化界面</title>
      <link href="/2024/04/04/PyQt%E5%85%A5%E9%97%A83%E2%80%94%E2%80%94%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%A3%80%E6%B5%8B%E5%8F%AF%E8%A7%86%E5%8C%96%E7%95%8C%E9%9D%A2/"/>
      <url>/2024/04/04/PyQt%E5%85%A5%E9%97%A83%E2%80%94%E2%80%94%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%A3%80%E6%B5%8B%E5%8F%AF%E8%A7%86%E5%8C%96%E7%95%8C%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1><span id="前言">前言：</span></h1><p>实现一个调用相机拍照、展示拍摄图片检测结果可视化界面。</p><h1><span id="实现步骤">实现步骤：</span></h1><h2><span id="1-调用相机功能此处为海康相机">1、调用相机功能（此处为海康相机）</span></h2><p>功能：python调用相机获取设备、连接设备、获取实时流、点击拍照。</p><p>参考：<a href="https://blog.csdn.net/weixin_42795788/article/details/124407780?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171265172616800180696524%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=171265172616800180696524&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-124407780-null-null.nonecase&amp;utm_term=qt&amp;spm=1018.2226.3001.4450">https://blog.csdn.net/weixin_42795788/article/details/124407780?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171265172616800180696524%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=171265172616800180696524&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-124407780-null-null.nonecase&amp;utm_term=qt&amp;spm=1018.2226.3001.4450</a></p><h2><span id="2-拍摄图片展示">2、拍摄图片展示</span></h2><p>功能：滚动框展示拍摄图片，时间从近到远排序，按钮点击图片放大展示在新QLabel中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QListWidget, QLabel, QListWidgetItem</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPixmap</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> pyqtSignal</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义QListWidget类，实现上述功能</span></span><br><span class="line"><span class="comment"># 滚动框缩略图展示，点击放大功能</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageListWidget</span>(<span class="params">QListWidget</span>):</span></span><br><span class="line">    imageClicked = pyqtSignal(QPixmap)  <span class="comment"># 自定义信号，用于点击 QLabel 时发射信号</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(parent)</span><br><span class="line">        <span class="comment"># self.setFlow(QListWidget.LeftToRight)  # 从左到右</span></span><br><span class="line">        self.setResizeMode(QListWidget.Adjust)  <span class="comment"># 自动调整大小</span></span><br><span class="line">        self.setViewMode(QListWidget.IconMode)  <span class="comment"># 以图标形式展示</span></span><br><span class="line">        <span class="comment"># self.setIconSize(QSize(200, 200))   # 设置图标大小</span></span><br><span class="line">        <span class="comment"># self.setSelectionMode(QListWidget.SingleSelection)  # 设置单选模式</span></span><br><span class="line">        self.pixmaps = []  <span class="comment"># 存储每个图片的pixmap</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_image</span>(<span class="params">self, pixmap, img_show_input</span>):</span></span><br><span class="line">        <span class="comment"># 方式1，以item图标展示</span></span><br><span class="line">        <span class="comment"># item = QListWidgetItem()</span></span><br><span class="line">        <span class="comment"># # item.setIcon(QIcon(pixmap))    # 以item图标展示</span></span><br><span class="line">        <span class="comment"># self.addItem(item)</span></span><br><span class="line"></span><br><span class="line">        self.pixmaps.append(pixmap)  <span class="comment"># 存储当前图片的pixmap</span></span><br><span class="line">        <span class="comment"># 方式二，以qlabel作为小部件添加到item中展示</span></span><br><span class="line">        item = QListWidgetItem()</span><br><span class="line">        label = QLabel()  <span class="comment"># 创建 QLabel</span></span><br><span class="line">        label.setPixmap(pixmap.scaled(img_show_input.size().width(), img_show_input.size().height()))</span><br><span class="line">        item.setSizeHint(img_show_input.size())</span><br><span class="line">        self.addItem(item)</span><br><span class="line">        self.setItemWidget(item, label)  <span class="comment"># 将 QLabel 设置为列表项的小部件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># label.mousePressEvent = lambda event, pixmap=pixmap: self.imageClicked.emit(pixmap)  # 为 QLabel 添加点击事件处理函数</span></span><br><span class="line">        index = <span class="built_in">len</span>(self.pixmaps) - <span class="number">1</span></span><br><span class="line">        label.mousePressEvent = <span class="keyword">lambda</span> event, index=index: self.imageClicked.emit(</span><br><span class="line">            self.pixmaps[index])  <span class="comment"># 为 QLabel 添加点击事件处理函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主窗口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建一个滚动图片展示区域</span></span><br><span class="line">        self.image_list_widget = ImageListWidget(self)</span><br><span class="line">        <span class="comment"># 方式1，设置位置和大小</span></span><br><span class="line">        self.image_list_widget.move(<span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">        self.image_list_widget.setFixedSize(<span class="number">600</span>, <span class="number">600</span>)</span><br><span class="line">        self.image_list_widget.setStyleSheet(<span class="string">&quot;background-color: white;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建用于显示放大图片的 QLabel</span></span><br><span class="line">        self.enlarged_image_label = QLabel(self)</span><br><span class="line">        self.enlarged_image_label.setGeometry(<span class="number">650</span>, <span class="number">100</span>, <span class="number">600</span>, <span class="number">600</span>)  <span class="comment"># 方式2，设置位置和大小</span></span><br><span class="line">        self.enlarged_image_label.setStyleSheet(<span class="string">&quot;background-color: white;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加多张图片到滚动区域中</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            pixmap = QPixmap(<span class="string">f&quot;tmp/<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>.jpg&quot;</span>)  <span class="comment"># 从文件加载图片</span></span><br><span class="line">            self.image_list_widget.add_image(pixmap, self.enlarged_image_label)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 连接点击信号到显示放大图片的函数</span></span><br><span class="line">        self.image_list_widget.imageClicked.connect(self.show_enlarged_image)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_enlarged_image</span>(<span class="params">self, pixmap</span>):</span></span><br><span class="line">        self.enlarged_image_label.setPixmap(pixmap)  <span class="comment"># 在另一个 QLabel 中显示放大的图片</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication([])</span><br><span class="line">    window = MainWindow()</span><br><span class="line">    window.resize(<span class="number">1200</span>, <span class="number">1200</span>)  <span class="comment"># 设置窗口大小</span></span><br><span class="line">    window.show()</span><br><span class="line">    app.exec_()</span><br></pre></td></tr></table></figure><h2><span id="3-结果展示图片部分">3、结果展示（图片部分）</span></h2><p>功能：展示检测后画框图片，具有鼠标处放大、鼠标拖动等功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  自定义CustomLabel类实现指定鼠标位置滚轮缩放，鼠标拖动</span></span><br><span class="line"><span class="string">  QLabel功能调试</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QImage, QPixmap, QIcon, QColor, QWheelEvent, QMouseEvent</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> pyqtSlot, QSize, Qt, pyqtSignal, QEvent</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QTextBrowser, QWidget, QLabel, QPushButton, QFileDialog, QFrame, QMessageBox, \</span><br><span class="line">    QListWidgetItem, QSizePolicy, QListWidget, QScrollArea</span><br><span class="line"><span class="keyword">from</span> PyQt5.Qt <span class="keyword">import</span> QPainter, QPoint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomLabel</span>(<span class="params">QLabel</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(parent)</span><br><span class="line">        self.setMouseTracking(<span class="literal">True</span>)</span><br><span class="line">        self.img = <span class="literal">None</span></span><br><span class="line">        self.scaled_img = <span class="literal">None</span></span><br><span class="line">        self.start_pos = <span class="literal">None</span></span><br><span class="line">        self.end_pos = <span class="literal">None</span></span><br><span class="line">        self.left_click = <span class="literal">False</span></span><br><span class="line">        self.wheel_flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        self.scale = <span class="number">1</span></span><br><span class="line">        self.old_scale = <span class="number">1</span></span><br><span class="line">        self.point = QPoint(<span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># 图片左上角位置</span></span><br><span class="line">        self.rb_point = QPoint(<span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># 图片左上角位置</span></span><br><span class="line">        self.old_rb_point = QPoint(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.x = -<span class="number">1</span></span><br><span class="line">        self.y = -<span class="number">1</span></span><br><span class="line">        self.new_height = -<span class="number">1</span></span><br><span class="line">        self.new_width = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_image</span>(<span class="params">self, img</span>):</span></span><br><span class="line">        <span class="comment"># self.img = QPixmap(img_path)</span></span><br><span class="line">        self.img = img</span><br><span class="line">        width, height = self.img.width(), self.img.height()</span><br><span class="line">        self.img = self.img.scaled(width, height, Qt.KeepAspectRatio)</span><br><span class="line">        self.scaled_img = self.img</span><br><span class="line"></span><br><span class="line">        self.new_height = height</span><br><span class="line">        self.new_width = width</span><br><span class="line">        self.scale = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span>(<span class="params">self, e</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.scaled_img:</span><br><span class="line">            painter = QPainter()</span><br><span class="line">            painter.begin(self)</span><br><span class="line">            painter.scale(self.scale, self.scale)</span><br><span class="line">            <span class="keyword">if</span> self.wheel_flag:  <span class="comment"># 定点缩放</span></span><br><span class="line">                self.wheel_flag = <span class="literal">False</span></span><br><span class="line">                <span class="comment"># 判断当前鼠标pos在不在图上</span></span><br><span class="line">                this_left_x = self.point.x() * self.old_scale  <span class="comment"># 当前图片左上角在窗口的位置</span></span><br><span class="line">                this_left_y = self.point.y() * self.old_scale</span><br><span class="line"></span><br><span class="line">                this_scale_width = self.new_width * self.old_scale</span><br><span class="line">                this_scale_height = self.new_height * self.old_scale</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 鼠标点在图上，以鼠标点为中心动作</span></span><br><span class="line">                gap_x = self.x - this_left_x  <span class="comment"># 鼠标位置相对左上角的偏移量</span></span><br><span class="line">                gap_y = self.y - this_left_y</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span> &lt; gap_x &lt; this_scale_width <span class="keyword">and</span> <span class="number">0</span> &lt; gap_y &lt; this_scale_height:</span><br><span class="line">                    new_left_x = <span class="built_in">int</span>(self.x / self.scale - gap_x / self.old_scale)  <span class="comment"># 根据鼠标位置重新计算图像左上角位置</span></span><br><span class="line">                    new_left_y = <span class="built_in">int</span>(self.y / self.scale - gap_y / self.old_scale)</span><br><span class="line"></span><br><span class="line">                    self.point = QPoint(new_left_x, new_left_y)</span><br><span class="line">                    self.rb_point = QPoint(new_left_x + this_scale_width,</span><br><span class="line">                                           new_left_y + this_scale_height)</span><br><span class="line"></span><br><span class="line">            painter.drawPixmap(self.point, self.scaled_img)  <span class="comment"># 此函数中还会用scale对point进行处理</span></span><br><span class="line">            painter.end()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wheelEvent</span>(<span class="params">self, event</span>):</span></span><br><span class="line">        angle = event.angleDelta() / <span class="number">8</span>  <span class="comment"># 返回QPoint对象，为滚轮转过的数值，单位为1/8度</span></span><br><span class="line">        angleY = angle.y()</span><br><span class="line">        self.old_scale = self.scale</span><br><span class="line">        self.x, self.y = event.x(), event.y()  <span class="comment"># 鼠标位置</span></span><br><span class="line">        self.wheel_flag = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 获取当前鼠标相对于view的位置</span></span><br><span class="line">        <span class="keyword">if</span> angleY &gt; <span class="number">0</span>:</span><br><span class="line">            self.scale *= <span class="number">1.05</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 滚轮下滚</span></span><br><span class="line">            self.scale *= <span class="number">0.95</span></span><br><span class="line">        <span class="keyword">if</span> self.scale &lt; <span class="number">1</span>:  <span class="comment"># 最小尺寸为原图大小，比例为1</span></span><br><span class="line">            self.scale = <span class="number">1</span></span><br><span class="line">        self.adjustSize()</span><br><span class="line">        self.update()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 鼠标拖动</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mouseMoveEvent</span>(<span class="params">self, e</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.left_click:</span><br><span class="line">            self.end_pos = e.pos() - self.start_pos  <span class="comment"># 当前位置-起始位置=差值，e.pos()当前鼠标位置，返回(x,y)</span></span><br><span class="line">            lt_new_point = self.point + self.end_pos / self.scale  <span class="comment"># 图片左上角的距离变化</span></span><br><span class="line"></span><br><span class="line">            rb_new_point2 = self.rb_point + self.end_pos / self.scale</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 限制拖动图片到QLabel控件中（限制了图片左上角）</span></span><br><span class="line">            <span class="keyword">if</span> lt_new_point.x() &gt; <span class="number">0</span>:</span><br><span class="line">                lt_new_point.setX(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> lt_new_point.y() &gt; <span class="number">0</span>:</span><br><span class="line">                lt_new_point.setY(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># TODO 限制右下角拖进QLabel控件中（暂未实现，待优化）</span></span><br><span class="line">            <span class="comment"># 检查右下角是否超出 QLabel 控件的边界</span></span><br><span class="line">            <span class="comment">#if rb_new_point2.x() &lt; self.width() - 1:</span></span><br><span class="line">            <span class="comment">#    print(&quot;右下角的最大移动量：&quot;, (self.old_rb_point.x() - self.width()) / self.scale)</span></span><br><span class="line">            <span class="comment">#    lt_new_point.setX(int(self.point.x() - (self.old_rb_point.x() - self.width()) / self.scale))</span></span><br><span class="line">            <span class="comment">#    rb_new_point2.setX(self.width())</span></span><br><span class="line">            <span class="comment">#self.old_rb_point = rb_new_point2</span></span><br><span class="line">            <span class="comment">#self.rb_point = rb_new_point2</span></span><br><span class="line">            <span class="comment">#self.point = lt_new_point  # 更新图片左上角位置</span></span><br><span class="line">            <span class="comment">#self.start_pos = e.pos()</span></span><br><span class="line">            <span class="comment">#self.repaint()  # 重新画图</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mousePressEvent</span>(<span class="params">self, e</span>):</span></span><br><span class="line">        <span class="keyword">if</span> e.button() == Qt.LeftButton:</span><br><span class="line">            self.left_click = <span class="literal">True</span>  <span class="comment"># 开始拖动</span></span><br><span class="line">            self.start_pos = e.pos()  <span class="comment"># 记录鼠标点击位置</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mouseReleaseEvent</span>(<span class="params">self, e</span>):</span></span><br><span class="line">        <span class="keyword">if</span> e.button() == Qt.LeftButton:</span><br><span class="line">            self.left_click = <span class="literal">False</span>  <span class="comment"># 停止拖动</span></span><br></pre></td></tr></table></figure><h2><span id="4-结果展示文字部分">4、结果展示（文字部分）</span></h2><p>功能：在滚动框控件中以QLabel嵌套展示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QLabel, QScrollArea</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个滚动区域</span></span><br><span class="line">    scroll_area = QScrollArea()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个 QWidget 作为滚动区域的内容</span></span><br><span class="line">    container = QWidget(scroll_area)</span><br><span class="line"></span><br><span class="line">    not_other_num = <span class="number">0</span>  <span class="comment"># 父 QLabel 的数量计数器</span></span><br><span class="line">    y_offset = <span class="number">0</span>  <span class="comment"># 控制纵向位置的偏移量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):  <span class="comment"># 示例循环 5 次</span></span><br><span class="line">        <span class="comment"># 创建父级 QLabel</span></span><br><span class="line">        parent_label = QLabel(container)</span><br><span class="line">        parent_label.setGeometry(<span class="number">0</span>, y_offset, <span class="number">200</span>, <span class="number">50</span>)  <span class="comment"># 设置父级 QLabel 的位置和大小</span></span><br><span class="line">        parent_label.setStyleSheet(<span class="string">&quot;background-color: yellow;&quot;</span>)  <span class="comment"># 设置父级 QLabel 的背景颜色</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建两个包含文字的 QLabel</span></span><br><span class="line">        label1 = QLabel(<span class="string">&quot;Label 1&quot;</span>, parent=parent_label)</span><br><span class="line">        label1.setGeometry(<span class="number">10</span>, <span class="number">10</span>, <span class="number">80</span>, <span class="number">30</span>)  <span class="comment"># 设置第一个 QLabel 的位置和大小</span></span><br><span class="line">        label1.setStyleSheet(<span class="string">&quot;background-color: red&quot;</span>)  <span class="comment"># 设置第一个 QLabel 的背景颜色</span></span><br><span class="line"></span><br><span class="line">        label2 = QLabel(<span class="string">&quot;Label 2&quot;</span>, parent=parent_label)</span><br><span class="line">        label2.setGeometry(<span class="number">100</span>, <span class="number">10</span>, <span class="number">80</span>, <span class="number">30</span>)  <span class="comment"># 设置第二个 QLabel 的位置和大小</span></span><br><span class="line">        label2.setStyleSheet(<span class="string">&quot;background-color: blue&quot;</span>)  <span class="comment"># 设置第二个 QLabel 的背景颜色</span></span><br><span class="line"></span><br><span class="line">        not_other_num += <span class="number">1</span></span><br><span class="line">        y_offset += <span class="number">60</span>  <span class="comment"># 更新纵向位置偏移量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置容器的固定大小</span></span><br><span class="line">    container.setFixedSize(<span class="number">200</span>, y_offset)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将容器设置为滚动区域的 widget</span></span><br><span class="line">    scroll_area.setWidget(container)</span><br><span class="line"></span><br><span class="line">    scroll_area.show()</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h2><span id="5-细节优化">5、细节优化：</span></h2><p>​    1、所有控件随窗口自适应缩放：使用resizeEvent()函数</p><p>​    2、相机是否连接监控：使用QTimer()创建一个定时器，每隔一段时间检查相机状态。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        QWidget.__init__(self)</span><br><span class="line">        <span class="comment">#   界面显示相关内容</span></span><br><span class="line">        self.initUI()</span><br><span class="line">        <span class="comment"># ------创建一个定时器，每隔一定时间检查一次相机状态-----</span></span><br><span class="line">        self.timer = QTimer()</span><br><span class="line">        self.timer.timeout.connect(self.MonitorLight)</span><br><span class="line">        self.timer.start(<span class="number">1000</span>)  <span class="comment"># 每隔1秒检查一次相机状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -----监控相机是否连接-----</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">MonitorLight</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;连接中&quot;</span>)   <span class="comment"># 替换为自己的实现功能</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PyQt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt入门2——构建一个标注数据处理功能界面</title>
      <link href="/2024/02/25/PyQt%E5%85%A5%E9%97%A82%E2%80%94%E2%80%94%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%A0%87%E6%B3%A8%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%8A%9F%E8%83%BD%E7%95%8C%E9%9D%A2/"/>
      <url>/2024/02/25/PyQt%E5%85%A5%E9%97%A82%E2%80%94%E2%80%94%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%A0%87%E6%B3%A8%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%8A%9F%E8%83%BD%E7%95%8C%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1><span id="前言">前言：</span></h1><p>将处理标注数据的功能脚本集成到一个简单的可视化界面。</p><h1><span id="实现步骤">实现步骤：</span></h1><h2><span id="1-主窗口">1、主窗口</span></h2><p>包含一个功能选择按钮。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ----------创建主窗口----------</span></span><br><span class="line">self.setWindowTitle(<span class="string">&#x27;数据处理平台&#x27;</span>)</span><br><span class="line">self.resize(<span class="number">640</span>, <span class="number">480</span>) <span class="comment"># 窗口大小</span></span><br><span class="line"><span class="comment"># self.setGeometry(100, 100, 640, 480)</span></span><br><span class="line"></span><br><span class="line">self.button_txt = QPushButton(<span class="string">&#x27;功能选择&#x27;</span>, self)</span><br><span class="line">self.button_txt.setGeometry(<span class="number">20</span>, <span class="number">20</span>, <span class="number">130</span>, <span class="number">30</span>)</span><br></pre></td></tr></table></figure><h2><span id="2-功能选择多功能">2、功能选择（多功能）</span></h2><p>以下拉框的形式进行选择，通过点击选项触发对应功能窗口。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ----------创建下拉菜单----------</span></span><br><span class="line"><span class="comment"># 创建下拉菜单</span></span><br><span class="line">self.combobox_txt = QComboBox(self)</span><br><span class="line">self.combobox_txt.addItems([<span class="string">&#x27;未选择&#x27;</span>, <span class="string">&#x27;xml2txt&#x27;</span>, <span class="string">&#x27;change xml label&#x27;</span>])</span><br><span class="line"><span class="comment"># self.combobox_txt.hide()  # 初始隐藏下拉菜单</span></span><br><span class="line"><span class="comment"># self.combobox_txt.setCurrentIndex(-1)  # 设置初始索引为 -1, 必须在添加控件之前设置</span></span><br><span class="line">self.combobox_txt.setGeometry(self.button_txt.x(), self.button_txt.y() + self.button_txt.height(), <span class="number">130</span>, <span class="number">30</span>)</span><br><span class="line">self.combobox_txt.activated.connect(</span><br><span class="line">            <span class="keyword">lambda</span>: self.switch_page(self.combobox_txt, self.stacked_widget))  <span class="comment"># 绑定选择事件, activated会自动传输index，从0开始。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------创建下拉菜单对应的切换界面----------</span></span><br><span class="line">self.stacked_widget = QStackedWidget(self)  <span class="comment"># 创建叠加窗口</span></span><br><span class="line">self.stacked_widget.setGeometry(<span class="number">50</span>, <span class="number">100</span>, <span class="number">600</span>, <span class="number">600</span>)  <span class="comment"># 设置窗口位置</span></span><br></pre></td></tr></table></figure><h2><span id="3-触发切换界面">3、触发切换界面</span></h2><p>activated槽函数switch_page，触发界面切换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -----下拉选项触发-----</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">switch_page</span>(<span class="params">self, combobox, stacked_widget</span>):</span></span><br><span class="line">    index = combobox.currentIndex()</span><br><span class="line">    stacked_widget.setCurrentIndex(index)</span><br></pre></td></tr></table></figure><h2><span id="4-不同功能界面">4、不同功能界面</span></h2><p>在对应界面添加文本框（QLabel类）、输入框控件（QLineEdit类）、按钮控件（QPushButton类），setPlaceholderText类表示在输入框中添加文字提示，提示输入参数格式示例。按钮控件点击触发功能函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ----------切换界面示例----------</span></span><br><span class="line"><span class="comment"># page1  xml to txt</span></span><br><span class="line">self.page1_xml = QWidget()</span><br><span class="line"></span><br><span class="line">self.page1_label1_xml = QLabel(<span class="string">&#x27;img_root:&#x27;</span>, self.page1_xml)  <span class="comment"># 在page1里面添加输入框控件</span></span><br><span class="line">self.page1_label1_xml.setGeometry(<span class="number">25</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">30</span>)</span><br><span class="line">self.page1_input_field1_xml = QLineEdit(self.page1_xml)</span><br><span class="line">self.page1_input_field1_xml.setPlaceholderText(<span class="string">&quot;输入图片地址：./ImgFilePath&quot;</span>)</span><br><span class="line">self.page1_input_field1_xml.setGeometry(<span class="number">110</span>, <span class="number">25</span>, <span class="number">300</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">self.page1_label2_xml = QLabel(<span class="string">&#x27;xml_root:&#x27;</span>, self.page1_xml)</span><br><span class="line">self.page1_label2_xml.setGeometry(<span class="number">25</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">30</span>)  <span class="comment"># (x,y, h, w)</span></span><br><span class="line">self.page1_input_field2_xml = QLineEdit(self.page1_xml)</span><br><span class="line">self.page1_input_field2_xml.setPlaceholderText(<span class="string">&quot;输入xml地址：./XmlFilePath&quot;</span>)</span><br><span class="line">self.page1_input_field2_xml.setGeometry(<span class="number">110</span>, <span class="number">55</span>, <span class="number">300</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">self.page1_label3_xml = QLabel(<span class="string">&#x27;classes:&#x27;</span>, self.page1_xml)</span><br><span class="line">self.page1_label3_xml.setGeometry(<span class="number">25</span>, <span class="number">80</span>, <span class="number">100</span>, <span class="number">30</span>)</span><br><span class="line">self.page1_input_field3_xml = QLineEdit(self.page1_xml)</span><br><span class="line">self.page1_input_field3_xml.setPlaceholderText(<span class="string">&quot;输入类别列表格式：[fg, a1], 字符也不用引号&quot;</span>)</span><br><span class="line">self.page1_input_field3_xml.setGeometry(<span class="number">110</span>, <span class="number">85</span>, <span class="number">300</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">self.page1_label4_xml = QLabel(<span class="string">&#x27;save_txt_root:&#x27;</span>, self.page1_xml)</span><br><span class="line">self.page1_label4_xml.setGeometry(<span class="number">10</span>, <span class="number">110</span>, <span class="number">120</span>, <span class="number">30</span>)  <span class="comment"># (x,y, h, w)</span></span><br><span class="line">self.page1_input_field4_xml = QLineEdit(self.page1_xml)</span><br><span class="line">self.page1_input_field4_xml.setPlaceholderText(<span class="string">&quot;输入txt保存地址：./TxtFilePath&quot;</span>)</span><br><span class="line">self.page1_input_field4_xml.setGeometry(<span class="number">130</span>, <span class="number">115</span>, <span class="number">280</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">self.stacked_widget.addWidget(self.page1_xml)</span><br></pre></td></tr></table></figure><h2><span id="5-参数接收">5、参数接收</span></h2><p>对输入框中的信息进行接收，获取数据为str类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xml2txt_button_click</span>(<span class="params">self</span>):</span></span><br><span class="line">    img_root = self.page1_input_field1_xml.text()  <span class="comment"># 标注图片路径</span></span><br><span class="line">    xml_root = self.page1_input_field2_xml.text()  <span class="comment"># xml地址</span></span><br><span class="line">    input_classes = self.page1_input_field3_xml.text()  <span class="comment"># classes列表</span></span><br><span class="line">    classes = input_classes[<span class="number">1</span>:-<span class="number">1</span>].split(<span class="string">&#x27;, &#x27;</span>)  <span class="comment"># 获取为str类型数据，转为list</span></span><br><span class="line">    txt_root = self.page1_input_field4_xml.text()  <span class="comment"># txt保存地址</span></span><br></pre></td></tr></table></figure><h2><span id="6-按钮触发函数">6、按钮触发函数</span></h2><p>点击按钮触发槽函数，xml2txt_button_click替换为自己的功能函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 该部分可添加到步骤3中</span></span><br><span class="line">self.page1_submit_button_xml = QPushButton(<span class="string">&quot;运行&quot;</span>, self.page1_xml)</span><br><span class="line">self.page1_submit_button_xml.setGeometry(<span class="number">250</span>, <span class="number">200</span>, <span class="number">70</span>, <span class="number">30</span>)</span><br><span class="line">self.page1_submit_button_xml.clicked.connect(self.xml2txt_button_click)  <span class="comment"># 运行按钮调用函数</span></span><br></pre></td></tr></table></figure><h2><span id="7-函数运行反馈">7、函数运行反馈</span></h2><p>运行成功提示success，运行失败提示错误详情。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -----异常处理，运行反馈-----</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 功能函数xml2txt替换为自己的函数</span></span><br><span class="line">    xml2txt(xml_root, xml_name, txt_save_path, classes, img_root)</span><br><span class="line">    <span class="comment"># 成功运行提示</span></span><br><span class="line">    QMessageBox.information(self, <span class="string">&#x27;Success&#x27;</span>, <span class="string">&#x27;Your program has run successfully!&#x27;</span>, QMessageBox.Ok)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># 捕获异常并显示错误消息</span></span><br><span class="line">    QMessageBox.critical(self, <span class="string">&#x27;Error&#x27;</span>, <span class="string">f&quot;An error occurred: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2><span id="8-主程序">8、主程序</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = MyWindow()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h1><span id="全部代码">全部代码：</span></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QPushButton, QLabel, QLineEdit, QStackedWidget, \</span><br><span class="line">    QComboBox, QMessageBox</span><br><span class="line"><span class="keyword">from</span> utils.label_utils <span class="keyword">import</span> xml2txt, change_xml_label</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主界面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWindow</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ----------创建界面----------</span></span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;数据处理平台&#x27;</span>)</span><br><span class="line">        self.resize(<span class="number">640</span>, <span class="number">480</span>)</span><br><span class="line">        <span class="comment"># self.setGeometry(100, 100, 640, 480)</span></span><br><span class="line"></span><br><span class="line">        self.button_txt = QPushButton(<span class="string">&#x27;功能选择&#x27;</span>, self)</span><br><span class="line">        self.button_txt.setGeometry(<span class="number">20</span>, <span class="number">20</span>, <span class="number">130</span>, <span class="number">30</span>)</span><br><span class="line">        self.button_txt.clicked.connect(self.show_combobox)  <span class="comment"># 传入自定义参数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># ----------创建下拉菜单----------</span></span><br><span class="line">        <span class="comment"># 创建txt下拉菜单</span></span><br><span class="line">        self.combobox_txt = QComboBox(self)</span><br><span class="line">        self.combobox_txt.addItems([<span class="string">&#x27;未选择&#x27;</span>, <span class="string">&#x27;xml2txt&#x27;</span>, <span class="string">&#x27;change xml label&#x27;</span>])</span><br><span class="line">        <span class="comment"># self.combobox_txt.hide()  # 初始隐藏下拉菜单</span></span><br><span class="line">        <span class="comment"># self.combobox_txt.setCurrentIndex(-1)  # 设置初始索引为 -1, 必须在添加控件之前设置</span></span><br><span class="line">        self.combobox_txt.setGeometry(self.button_txt.x(), self.button_txt.y() + self.button_txt.height(), <span class="number">130</span>, <span class="number">30</span>)</span><br><span class="line">        <span class="comment"># self.combobox_txt.move(self.button_txt.x(), self.button_txt.y() + self.button_txt.height())  # 移动控件到下（x,y）位置</span></span><br><span class="line">        self.combobox_txt.activated.connect(</span><br><span class="line">            <span class="keyword">lambda</span>: self.switch_page(self.combobox_txt, self.stacked_widget))  <span class="comment"># 绑定选择事件, activated会自动传输index</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># ----------创建下拉菜单对应的切换界面----------</span></span><br><span class="line">        <span class="comment"># -----界面切换模块-----</span></span><br><span class="line">        self.stacked_widget = QStackedWidget(self)  <span class="comment"># 创建叠加窗口</span></span><br><span class="line">        self.stacked_widget.setGeometry(<span class="number">50</span>, <span class="number">100</span>, <span class="number">600</span>, <span class="number">600</span>)  <span class="comment"># 设置窗口位置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># page0 默认空界面</span></span><br><span class="line">        self.page0_xml = QWidget()</span><br><span class="line">        self.stacked_widget.addWidget(self.page0_xml)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># -----创建处理界面-----</span></span><br><span class="line">        <span class="comment"># page1  xml to txt</span></span><br><span class="line">        self.page1_xml = QWidget()</span><br><span class="line"></span><br><span class="line">        self.page1_label1_xml = QLabel(<span class="string">&#x27;img_root:&#x27;</span>, self.page1_xml)  <span class="comment"># 在page1里面添加输入框控件</span></span><br><span class="line">        self.page1_label1_xml.setGeometry(<span class="number">25</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">30</span>)</span><br><span class="line">        self.page1_input_field1_xml = QLineEdit(self.page1_xml)</span><br><span class="line">        self.page1_input_field1_xml.setPlaceholderText(<span class="string">&quot;输入图片地址：./ImgFilePath&quot;</span>)</span><br><span class="line">        self.page1_input_field1_xml.setGeometry(<span class="number">110</span>, <span class="number">25</span>, <span class="number">300</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">        self.page1_label2_xml = QLabel(<span class="string">&#x27;xml_root:&#x27;</span>, self.page1_xml)</span><br><span class="line">        self.page1_label2_xml.setGeometry(<span class="number">25</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">30</span>)  <span class="comment"># (x,y, h, w)</span></span><br><span class="line">        self.page1_input_field2_xml = QLineEdit(self.page1_xml)</span><br><span class="line">        self.page1_input_field2_xml.setPlaceholderText(<span class="string">&quot;输入xml地址：./XmlFilePath&quot;</span>)</span><br><span class="line">        self.page1_input_field2_xml.setGeometry(<span class="number">110</span>, <span class="number">55</span>, <span class="number">300</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">        self.page1_label3_xml = QLabel(<span class="string">&#x27;classes:&#x27;</span>, self.page1_xml)</span><br><span class="line">        self.page1_label3_xml.setGeometry(<span class="number">25</span>, <span class="number">80</span>, <span class="number">100</span>, <span class="number">30</span>)</span><br><span class="line">        self.page1_input_field3_xml = QLineEdit(self.page1_xml)</span><br><span class="line">        self.page1_input_field3_xml.setPlaceholderText(<span class="string">&quot;输入类别列表格式：[fg, a1], 字符也不用引号&quot;</span>)</span><br><span class="line">        self.page1_input_field3_xml.setGeometry(<span class="number">110</span>, <span class="number">85</span>, <span class="number">300</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">        self.page1_label4_xml = QLabel(<span class="string">&#x27;save_txt_root:&#x27;</span>, self.page1_xml)</span><br><span class="line">        self.page1_label4_xml.setGeometry(<span class="number">10</span>, <span class="number">110</span>, <span class="number">120</span>, <span class="number">30</span>)  <span class="comment"># (x,y, h, w)</span></span><br><span class="line">        self.page1_input_field4_xml = QLineEdit(self.page1_xml)</span><br><span class="line">        self.page1_input_field4_xml.setPlaceholderText(<span class="string">&quot;输入txt保存地址：./TxtFilePath&quot;</span>)</span><br><span class="line">        self.page1_input_field4_xml.setGeometry(<span class="number">130</span>, <span class="number">115</span>, <span class="number">280</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">        self.page1_submit_button_xml = QPushButton(<span class="string">&quot;运行&quot;</span>, self.page1_xml)</span><br><span class="line">        self.page1_submit_button_xml.setGeometry(<span class="number">250</span>, <span class="number">200</span>, <span class="number">70</span>, <span class="number">30</span>)</span><br><span class="line">        self.page1_submit_button_xml.clicked.connect(self.xml2txt_button_click)  <span class="comment"># 运行按钮调用函数</span></span><br><span class="line"></span><br><span class="line">        self.stacked_widget.addWidget(self.page1_xml)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># page2  change xml label</span></span><br><span class="line">        self.page2_xml = QWidget()</span><br><span class="line"></span><br><span class="line">        self.page2_label1_xml = QLabel(<span class="string">&#x27;xml root:&#x27;</span>, self.page2_xml)</span><br><span class="line">        self.page2_label1_xml.setGeometry(<span class="number">25</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">30</span>)  <span class="comment"># 设置输入框1的位置和大小 (x,y, w, h)</span></span><br><span class="line">        self.page2_input_field1_xml = QLineEdit(self.page2_xml)  <span class="comment"># 在窗口里面添加输入框控件</span></span><br><span class="line">        self.page2_input_field1_xml.setPlaceholderText(<span class="string">&quot;输入xml存放地址：./XmlFilePath&quot;</span>)</span><br><span class="line">        self.page2_input_field1_xml.setGeometry(<span class="number">110</span>, <span class="number">25</span>, <span class="number">300</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">        self.page2_label2_xml = QLabel(<span class="string">&#x27;ori cla:&#x27;</span>, self.page2_xml)</span><br><span class="line">        self.page2_label2_xml.setGeometry(<span class="number">25</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">30</span>)  <span class="comment"># 设置输入框1的位置和大小 (x,y, w, h)</span></span><br><span class="line">        self.page2_input_field2_xml = QLineEdit(self.page2_xml)  <span class="comment"># 在窗口里面添加输入框控件</span></span><br><span class="line">        self.page2_input_field2_xml.setPlaceholderText(<span class="string">&quot;输入需要修改的标签名：car or person...&quot;</span>)</span><br><span class="line">        self.page2_input_field2_xml.setGeometry(<span class="number">110</span>, <span class="number">55</span>, <span class="number">300</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">        self.page2_label3_xml = QLabel(<span class="string">&#x27;mod cla:&#x27;</span>, self.page2_xml)</span><br><span class="line">        self.page2_label3_xml.setGeometry(<span class="number">25</span>, <span class="number">80</span>, <span class="number">100</span>, <span class="number">30</span>)  <span class="comment"># 设置输入框1的位置和大小 (x,y, w, h)</span></span><br><span class="line">        self.page2_input_field3_xml = QLineEdit(self.page2_xml)  <span class="comment"># 在窗口里面添加输入框控件</span></span><br><span class="line">        self.page2_input_field3_xml.setPlaceholderText(<span class="string">&quot;输入修改后的标签名：car or person...&quot;</span>)</span><br><span class="line">        self.page2_input_field3_xml.setGeometry(<span class="number">110</span>, <span class="number">85</span>, <span class="number">300</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">        self.page2_label4_xml = QLabel(<span class="string">&#x27;param:&#x27;</span>, self.page2_xml)</span><br><span class="line">        self.page2_label4_xml.setGeometry(<span class="number">25</span>, <span class="number">110</span>, <span class="number">100</span>, <span class="number">30</span>)  <span class="comment"># 设置输入框1的位置和大小 (x,y, w, h)</span></span><br><span class="line">        self.page2_input_field4_xml = QLineEdit(self.page2_xml)  <span class="comment"># 在窗口里面添加输入框控件</span></span><br><span class="line">        self.page2_input_field4_xml.setPlaceholderText(<span class="string">&quot;是否执行不为ori都修改为mod参数：0(否) or 1（是）&quot;</span>)</span><br><span class="line">        self.page2_input_field4_xml.setGeometry(<span class="number">110</span>, <span class="number">115</span>, <span class="number">330</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">        self.page2_submit_button_xml = QPushButton(<span class="string">&quot;运行&quot;</span>, self.page2_xml)  <span class="comment"># 在窗口里面添加按钮控件</span></span><br><span class="line">        self.page2_submit_button_xml.setGeometry(<span class="number">250</span>, <span class="number">200</span>, <span class="number">70</span>, <span class="number">30</span>)</span><br><span class="line">        self.page2_submit_button_xml.clicked.connect(self.change_xml_label_button_click)</span><br><span class="line"></span><br><span class="line">        self.stacked_widget.addWidget(self.page2_xml)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ----------方法----------</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_combobox</span>(<span class="params">self, custom_param</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.combobox_txt.isHidden():</span><br><span class="line">            self.combobox_txt.show()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.combobox_txt.hide()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># -----下拉选项触发-----</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">switch_page</span>(<span class="params">self, combobox, stacked_widget</span>):</span></span><br><span class="line">        index = combobox.currentIndex()</span><br><span class="line">        stacked_widget.setCurrentIndex(index)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">xml2txt_button_click</span>(<span class="params">self</span>):</span></span><br><span class="line">        img_root = self.page1_input_field1_xml.text()  <span class="comment"># 标注图片路径</span></span><br><span class="line">        xml_root = self.page1_input_field2_xml.text()  <span class="comment"># xml地址</span></span><br><span class="line">        input_classes = self.page1_input_field3_xml.text()  <span class="comment"># classes列表</span></span><br><span class="line">        classes = input_classes[<span class="number">1</span>:-<span class="number">1</span>].split(<span class="string">&#x27;, &#x27;</span>)  <span class="comment"># 获取为str类型数据，转为list</span></span><br><span class="line">        txt_root = self.page1_input_field4_xml.text()  <span class="comment"># txt保存地址</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> xml_name <span class="keyword">in</span> os.listdir(xml_root):</span><br><span class="line">                <span class="built_in">print</span>(xml_name)</span><br><span class="line">                txt_save_path = os.path.join(txt_root, xml_name.replace(<span class="string">&#x27;xml&#x27;</span>, <span class="string">&#x27;txt&#x27;</span>))</span><br><span class="line">                xml2txt(xml_root, xml_name, txt_save_path, classes, img_root)</span><br><span class="line">            <span class="comment"># 成功运行提示</span></span><br><span class="line">            QMessageBox.information(self, <span class="string">&#x27;Success&#x27;</span>, <span class="string">&#x27;Your program has run successfully!&#x27;</span>, QMessageBox.Ok)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># 捕获异常并显示错误消息</span></span><br><span class="line">            QMessageBox.critical(self, <span class="string">&#x27;Error&#x27;</span>, <span class="string">f&quot;An error occurred: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="comment"># self.page1_input_field1_xml.clear()</span></span><br><span class="line">            <span class="comment"># self.page1_input_field2_xml.clear()</span></span><br><span class="line">            <span class="comment"># self.page1_input_field3_xml.clear()</span></span><br><span class="line">            <span class="comment"># self.page1_input_field4_xml.clear()</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">change_xml_label_button_click</span>(<span class="params">self</span>):</span></span><br><span class="line">        xml_root = self.page2_input_field1_xml.text()</span><br><span class="line">        origin = self.page2_input_field2_xml.text()</span><br><span class="line">        modify = self.page2_input_field3_xml.text()</span><br><span class="line">        input_param = self.page2_input_field4_xml.text()</span><br><span class="line">        <span class="keyword">if</span> input_param == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            reverse_param = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            reverse_param = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            change_xml_label(xml_root, origin, modify, reverse_param)</span><br><span class="line">            <span class="comment"># 成功运行</span></span><br><span class="line">            QMessageBox.information(self, <span class="string">&#x27;Success&#x27;</span>, <span class="string">&#x27;Your program has run successfully!&#x27;</span>, QMessageBox.Ok)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># 捕获异常并显示错误消息</span></span><br><span class="line">            QMessageBox.critical(self, <span class="string">&#x27;Error&#x27;</span>, <span class="string">f&quot;An error occurred: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = MyWindow()</span><br><span class="line">    window.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h1><span id="界面展示">界面展示：</span></h1><p>下拉框可选择2个功能，存在2个切换界面，根据输入框文字提示输入参数格式，点击运行，运行成功返回成功提示，运行失败返回失败提示。</p><p><img src="%E7%95%8C%E9%9D%A2%E5%B1%95%E7%A4%BA.png" alt="主界面"></p><p><img src="%E8%BF%90%E8%A1%8C%E6%88%90%E5%8A%9F%E6%8F%90%E7%A4%BA.png" alt="成功提示"></p><p><img src="%E9%94%99%E8%AF%AF%E6%8F%90%E7%A4%BA.png" alt="错误提示"></p>]]></content>
      
      
      <categories>
          
          <category> PyQt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt入门1</title>
      <link href="/2024/02/20/PyQt%E5%85%A5%E9%97%A81/"/>
      <url>/2024/02/20/PyQt%E5%85%A5%E9%97%A81/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1><span id="pyqt学习前言">PyQt学习前言：</span></h1><p>针对一些工作中的重复部分，将功能做成可视化界面引导执行并打包成exe，可让小伙伴一键上手操作，提高工作效率。</p><h1><span id="安装">安装：</span></h1><p>windows：直接pip安装即可，使用百度镜像安装命令如下，此处pyinstaller模块用来将python代码打包成exe。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://mirrors.baidu.com/pypi/simple PyQt5 pyinstaller</span><br></pre></td></tr></table></figure><h1><span id="实际使用">实际使用：</span></h1><h2><span id="1-窗口构建">1、窗口构建</span></h2><p>常见控件：QLabel（文本控件）、QLineEdit（输入框）、QPushButoon（按钮）、按钮触发功能实现。</p><p>以QLabel控件为例：可插入文字、图片，也可将QLabel控件插入到QLabel中叠加使用。</p><ul><li>创建方式：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加文字</span></span><br><span class="line"><span class="comment"># 方式一</span></span><br><span class="line">label = QLabel(text)    <span class="comment"># text为要添加的文本</span></span><br><span class="line"><span class="comment">#方式二</span></span><br><span class="line">label = QLabel()</span><br><span class="line">label.setText(<span class="string">&quot;This is a QLabel&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加图片</span></span><br><span class="line">img_label = QLabel() </span><br><span class="line">pixmap = QPixmap(img_path)</span><br><span class="line">img_label.setPixmap(pixmap)</span><br></pre></td></tr></table></figure><ul><li>自定义位置、大小：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方式一</span></span><br><span class="line">qlabel = QLabel()</span><br><span class="line">qlabel.move(x, y)</span><br><span class="line">qlabel.resize(w, h)</span><br><span class="line"><span class="comment">#方式二</span></span><br><span class="line">qlabel.setGeometry(x, y, w, h)</span><br></pre></td></tr></table></figure><ul><li>调整控件样式：setStyleSheet</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义位置</span></span><br><span class="line"><span class="comment"># padding-left表示到左边的距离，padding-top到顶部的距离</span></span><br><span class="line">label.setStyleSheet(<span class="string">&quot;padding-left:10px; border-radius: 10px;background-color: white;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 固定左对齐、居中等</span></span><br><span class="line"><span class="comment"># 设置文本位置，将文本水平和垂直居中对齐</span></span><br><span class="line">label.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)</span><br></pre></td></tr></table></figure><ul><li>叠加使用：（QLabel包含Qlabel）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QLabel, QScrollArea</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个滚动区域</span></span><br><span class="line">    scroll_area = QScrollArea()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个 QWidget 作为滚动区域的内容</span></span><br><span class="line">    container = QWidget(scroll_area)</span><br><span class="line"></span><br><span class="line">    not_other_num = <span class="number">0</span>  <span class="comment"># 父 QLabel 的数量计数器</span></span><br><span class="line">    y_offset = <span class="number">0</span>  <span class="comment"># 控制纵向位置的偏移量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):  <span class="comment"># 示例循环 5 次</span></span><br><span class="line">        <span class="comment"># 创建父级 QLabel</span></span><br><span class="line">        parent_label = QLabel(container)</span><br><span class="line">        parent_label.setGeometry(<span class="number">0</span>, y_offset, <span class="number">200</span>, <span class="number">50</span>)  <span class="comment"># 设置父级 QLabel 的位置和大小</span></span><br><span class="line">        parent_label.setStyleSheet(<span class="string">&quot;background-color: yellow;&quot;</span>)  <span class="comment"># 设置父级 QLabel 的背景颜色</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建两个包含文字的 QLabel</span></span><br><span class="line">        label1 = QLabel(<span class="string">&quot;Label 1&quot;</span>, parent=parent_label)</span><br><span class="line">        label1.setGeometry(<span class="number">10</span>, <span class="number">10</span>, <span class="number">80</span>, <span class="number">30</span>)  <span class="comment"># 设置第一个 QLabel 的位置和大小</span></span><br><span class="line">        label1.setStyleSheet(<span class="string">&quot;background-color: red&quot;</span>)  <span class="comment"># 设置第一个 QLabel 的背景颜色</span></span><br><span class="line"></span><br><span class="line">        label2 = QLabel(<span class="string">&quot;Label 2&quot;</span>, parent=parent_label)</span><br><span class="line">        label2.setGeometry(<span class="number">100</span>, <span class="number">10</span>, <span class="number">80</span>, <span class="number">30</span>)  <span class="comment"># 设置第二个 QLabel 的位置和大小</span></span><br><span class="line">        label2.setStyleSheet(<span class="string">&quot;background-color: blue&quot;</span>)  <span class="comment"># 设置第二个 QLabel 的背景颜色</span></span><br><span class="line"></span><br><span class="line">        not_other_num += <span class="number">1</span></span><br><span class="line">        y_offset += <span class="number">60</span>  <span class="comment"># 更新纵向位置偏移量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置容器的固定大小</span></span><br><span class="line">    container.setFixedSize(<span class="number">200</span>, y_offset)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将容器设置为滚动区域的 widget</span></span><br><span class="line">    scroll_area.setWidget(container)</span><br><span class="line"></span><br><span class="line">    scroll_area.show()</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>实现：将父级QLabel添加到一个Widget()中，然后将Widget存放到滚动区域QScrollArea里</p><p>！！！注意：当自定义设置QScrollArea大小时，QWidget大小必须大于QScrollArea大小，才能有效实现结果。</p><h2><span id="2-简单应用">2、简单应用：</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QPushButton, QLabel, QVBoxLayout, QLineEdit</span><br><span class="line"><span class="keyword">from</span> utils.excel_utils <span class="keyword">import</span> numberAndCount  <span class="comment"># 个人功能函数，替换</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWindow</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建界面</span></span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;测试平台&#x27;</span>)  <span class="comment"># 界面名称</span></span><br><span class="line">        self.resize(<span class="number">640</span>,<span class="number">480</span>)</span><br><span class="line">        <span class="comment"># self.setGeometry(100, 100, 640, 480)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在窗口里面添加label控件</span></span><br><span class="line">        self.label1 = QLabel(<span class="string">&#x27;Path1:&#x27;</span>, self)</span><br><span class="line">        self.label1.setGeometry(<span class="number">20</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">30</span>)  <span class="comment"># 设置文本框的位置和大小 (x,y, w, h)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在窗口里面添加输入框控件</span></span><br><span class="line">        self.input_field1 = QLineEdit(self)</span><br><span class="line">        self.input_field1.setPlaceholderText(<span class="string">&quot;输入统计地址：./tmp_data&quot;</span>)  <span class="comment"># 在输入框中添加提示</span></span><br><span class="line">        self.input_field1.setGeometry(<span class="number">90</span>, <span class="number">25</span>, <span class="number">300</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">        self.label2 = QLabel(<span class="string">&#x27;Path2:&#x27;</span>, self)</span><br><span class="line">        self.label2.setGeometry(<span class="number">20</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">30</span>)  <span class="comment"># (x,y, h, w)</span></span><br><span class="line">        self.input_field2 = QLineEdit(self)  <span class="comment"># 创建</span></span><br><span class="line">        self.input_field2.setPlaceholderText(<span class="string">&quot;输入excel保存地址：./tmp.xlsx&quot;</span>) <span class="comment"># 在输入框中添加提示</span></span><br><span class="line">        self.input_field2.setGeometry(<span class="number">90</span>, <span class="number">55</span>, <span class="number">300</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在窗口里面添加按钮控件</span></span><br><span class="line">        self.submit_button = QPushButton(<span class="string">&quot;运行&quot;</span>, self)</span><br><span class="line">        self.submit_button.setGeometry(<span class="number">50</span>, <span class="number">100</span>, <span class="number">70</span>, <span class="number">30</span>)</span><br><span class="line">        self.submit_button.clicked.connect(self.on_button_click)  <span class="comment"># 按钮触发</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_button_click</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 函数调用，替换成自己的函数</span></span><br><span class="line">        <span class="comment"># train_path_root = &quot;./tmp_data&quot;</span></span><br><span class="line">        <span class="comment"># excel_save_path = &quot;./tmp.xlsx&quot;</span></span><br><span class="line">        train_path_root = self.input_field1.text()</span><br><span class="line">        excel_save_path = self.input_field2.text()</span><br><span class="line">        numberAndCount(train_path_root, excel_save_path)</span><br><span class="line">       </span><br><span class="line">        </span><br><span class="line"><span class="comment"># 主程序</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = MyWindow()  <span class="comment"># 继承QWidget类</span></span><br><span class="line">    window.show()    <span class="comment"># 界面显示</span></span><br><span class="line">    sys.exit(app.exec_())  <span class="comment"># 循环显示界面</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可视化界面如下：</p><p><img src="blog/source/_posts/可视化界面.png"></p><h2><span id="3-打包exe">3、打包exe：</span></h2><p>在目标目录打开终端，使用python的pyinstaller对.py文件进行打包，如果打包的程序是图形界面程序，添加-w，则打包后打开exe文件将只出现图形界面，命令行窗口将被隐藏。命令如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -w .py文件</span><br></pre></td></tr></table></figure><p>将在该目录下生成dist文件和.spec，exe在dist文件下。</p><h1><span id="问题">问题：</span></h1><p>主要出现在打包的时候：</p><p>问题1、打包时出现RecursionError: maximum recursion depth exceeded错误，网上搜索表示程序中包含递归函数，但经过检查后代码中并不存在.</p><p>解决：<strong>重新安装pyinstaller后解决</strong>。</p><p>问题2、使用conda环境打包时，打包后的exe文件打开后提示无法引用PyQt5。</p><p>解决：<strong>使用 –path 将pyqt5的runw.exe地址手动传入。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller --path=d:\software\Anaconda3\envs\pytorch\Lib\site-packages\PyInstal ler\bootloader\Windows-64bit-intel\runw.exe -w pyqt.py</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch设置随机数</title>
      <link href="/2024/01/19/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94pytorch%E8%AE%BE%E7%BD%AE%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
      <url>/2024/01/19/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E2%80%94%E2%80%94pytorch%E8%AE%BE%E7%BD%AE%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1><span id="前言">前言：</span></h1><p>通过设置随机种子，使训练结果可复现，有效对比模型测试结果；</p><h1><span id="pytorch如何设置">pytorch如何设置：</span></h1><p>训练过程中的随机数包含：初始权重、随机数据增强、数据读取顺序等，将这些随机数固定，按理可保证训练结果一致。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置随机种子</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_seed</span>(<span class="params">seed</span>):</span></span><br><span class="line">    random.seed(seed)</span><br><span class="line">    np.random.seed(seed)</span><br><span class="line">    torch.manual_seed(seed)</span><br><span class="line">    torch.cuda.manual_seed(seed)</span><br><span class="line">    torch.cuda.manual_seed_all(seed)</span><br><span class="line">    torch.backends.cudnn.deterministic = <span class="literal">True</span>   </span><br><span class="line">    torch.backends.cudnn.benchmark = <span class="literal">False</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置Dataloader的种子</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_random_Dataloader</span>(<span class="params">worker_id, rank, seed</span>):</span></span><br><span class="line">    worker_seed = rank + seed</span><br><span class="line">    random.seed(worker_seed)</span><br><span class="line">    np.random.seed(worker_seed)</span><br><span class="line">    torch.manual_seed(worker_seed)</span><br><span class="line"></span><br><span class="line">set_seed(<span class="number">30</span>)</span><br><span class="line">set_random_Dataloader()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预处理、训练模型</span></span><br></pre></td></tr></table></figure><p> 参考：<a href="https://blog.csdn.net/weixin_44791964/article/details/131622957">https://blog.csdn.net/weixin_44791964/article/details/131622957</a></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023-AI事件回顾</title>
      <link href="/2024/01/09/2023-AI%E4%BA%8B%E4%BB%B6%E5%9B%9E%E9%A1%BE/"/>
      <url>/2024/01/09/2023-AI%E4%BA%8B%E4%BB%B6%E5%9B%9E%E9%A1%BE/</url>
      
        <content type="html"><![CDATA[<p>基础：22年11月30日，ChatGPT横空出世</p><p>23年2月：</p><ol><li>ChatGPT plus 版本上线；</li><li>微软宣布将ChatGPT功能集成到New Bing；</li><li>Meta发布LLaMa</li></ol><p>23年3月：</p><ol><li>OpenAI推出ChatGPT API；</li><li>OpenAI发布GPT-4</li><li>百度发布文心一言</li></ol><p>23年4月： </p><ol><li>Meta发布Segment Anything</li></ol><p>23年5月：</p><ol><li>特斯拉人形机器人（流畅行走、抓取物体）</li></ol><p>===============</p><p>23年6月：</p><ol><li>Runway Gen-2</li></ol><p>23年7月：</p><ol><li>Llama2开源；</li><li> overflow AI</li></ol><p>23年9月：</p><ol><li>OpenAI将DALL.E 1升级至DALL.E 3；</li><li>微软 EvoDiff；</li><li>HeyGen；</li><li>特斯拉Optimus可自主对物体进行分类（端到端训练）。</li></ol><p>23年10月：</p><ol><li>文心大模型4.0发布</li></ol><p>23年11月：</p><ol><li>Pika 1.0发布</li></ol><p>23年12月：</p><ol><li>谷歌DeepMind发布Gemini模型；</li><li>Mixtral AI开源了一个Mixtral 8x7B MoE模型；</li><li>MidJounery V6发布</li></ol><p>整体领域：AIGC</p><p>细分方向：图像生成（Midjourney、DALL-E3、Shutterstock AI）、视频生成（HeyGen、Runway Gen-2、Pika）、文本生成（Gemini、overflowAI、Llama、GPT-4）、图像分割（SAM）</p><p>发展：</p><ol><li>图像生成：GAN&rarr;DiffusionModel（扩散模型）&rarr;stable Diffusion（文本生成图像）</li><li>文本生成：RNN&rarr;Transformer&rarr;GPT</li></ol><p>应用：</p><p><img src="aigc.png" alt="应用："></p><p>图片来源：TE智库《企业AIGC商业落地应用研究报告》</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
