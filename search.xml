<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PyQt入门1</title>
      <link href="/2024/02/20/PyQt%E5%85%A5%E9%97%A81/"/>
      <url>/2024/02/20/PyQt%E5%85%A5%E9%97%A81/</url>
      
        <content type="html"><![CDATA[<p>目录：</p><p>[TOC]</p><h3 id="PyQt学习目的："><a href="#PyQt学习目的：" class="headerlink" title="PyQt学习目的："></a>PyQt学习目的：</h3><p>针对一些工作中的重复部分，将功能做成可视化界面引导执行并打包成exe，可让未接触过的小伙伴一键上手操作，提高工作效率。</p><h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><p>直接pip安装即可，使用百度镜像安装命令如下，此处pyinstaller模块用来将python代码打包成exe。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://mirrors.baidu.com/pypi/simple PyQt5 pyinstaller</span><br></pre></td></tr></table></figure><h3 id="实际使用："><a href="#实际使用：" class="headerlink" title="实际使用："></a>实际使用：</h3><h4 id="1、窗口构建"><a href="#1、窗口构建" class="headerlink" title="1、窗口构建"></a>1、窗口构建</h4><p>常用Qlabel（文本控件）、QLineEdit（输入框）、QPushButoon（按钮）、按钮触发功能实现，其他待学习。</p><h4 id="2、全部代码："><a href="#2、全部代码：" class="headerlink" title="2、全部代码："></a>2、全部代码：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QPushButton, QLabel, QVBoxLayout, QLineEdit</span><br><span class="line"><span class="keyword">from</span> utils.excel_utils <span class="keyword">import</span> numberAndCount  <span class="comment"># 个人功能函数，替换</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWindow</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建界面</span></span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;测试平台&#x27;</span>)  <span class="comment"># 界面名称</span></span><br><span class="line">        self.resize(<span class="number">640</span>,<span class="number">480</span>)</span><br><span class="line">        <span class="comment"># self.setGeometry(100, 100, 640, 480)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在窗口里面添加label控件</span></span><br><span class="line">        self.label1 = QLabel(<span class="string">&#x27;Path1:&#x27;</span>, self)</span><br><span class="line">        self.label1.setGeometry(<span class="number">20</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">30</span>)  <span class="comment"># 设置文本框的位置和大小 (x,y, w, h)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在窗口里面添加输入框控件</span></span><br><span class="line">        self.input_field1 = QLineEdit(self)</span><br><span class="line">        self.input_field1.setPlaceholderText(<span class="string">&quot;输入统计地址：./tmp_data&quot;</span>)  <span class="comment"># 在输入框中添加提示</span></span><br><span class="line">        self.input_field1.setGeometry(<span class="number">90</span>, <span class="number">25</span>, <span class="number">300</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">        self.label2 = QLabel(<span class="string">&#x27;Path2:&#x27;</span>, self)</span><br><span class="line">        self.label2.setGeometry(<span class="number">20</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">30</span>)  <span class="comment"># (x,y, h, w)</span></span><br><span class="line">        self.input_field2 = QLineEdit(self)  <span class="comment"># 创建</span></span><br><span class="line">        self.input_field2.setPlaceholderText(<span class="string">&quot;输入excel保存地址：./tmp.xlsx&quot;</span>) <span class="comment"># 在输入框中添加提示</span></span><br><span class="line">        self.input_field2.setGeometry(<span class="number">90</span>, <span class="number">55</span>, <span class="number">300</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在窗口里面添加按钮控件</span></span><br><span class="line">        self.submit_button = QPushButton(<span class="string">&quot;运行&quot;</span>, self)</span><br><span class="line">        self.submit_button.setGeometry(<span class="number">50</span>, <span class="number">100</span>, <span class="number">70</span>, <span class="number">30</span>)</span><br><span class="line">        self.submit_button.clicked.connect(self.on_button_click)  <span class="comment"># 按钮触发</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_button_click</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 函数调用，替换成自己的函数</span></span><br><span class="line">        <span class="comment"># train_path_root = &quot;./tmp_data&quot;</span></span><br><span class="line">        <span class="comment"># excel_save_path = &quot;./tmp.xlsx&quot;</span></span><br><span class="line">        train_path_root = self.input_field1.text()</span><br><span class="line">        excel_save_path = self.input_field2.text()</span><br><span class="line">        numberAndCount(train_path_root, excel_save_path)</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 主程序</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    window = MyWindow()  <span class="comment"># 继承QWidget类</span></span><br><span class="line">    window.show()    <span class="comment"># 界面显示</span></span><br><span class="line">    sys.exit(app.exec_())  <span class="comment"># 循环显示界面</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可视化界面如下：</p><p><img src="blog/source/_posts/可视化界面.png"></p><h4 id="3、打包exe："><a href="#3、打包exe：" class="headerlink" title="3、打包exe："></a>3、打包exe：</h4><p>在目标目录打开终端，使用python的pyinstaller对.py文件进行打包，如果打包的程序是图形界面程序，添加-w，则打包后打开exe文件将只出现图形界面，命令行窗口将被隐藏。命令如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -w .py文件</span><br></pre></td></tr></table></figure><p>将在该目录下生成dist文件和.spec，exe在dist文件下。</p><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>主要出现在打包的时候：</p><p>问题1、打包时出现RecursionError: maximum recursion depth exceeded错误，网上搜索表示程序中包含递归函数，但经过检查后代码中并不存在.</p><p>解决：<strong>重新安装pyinstaller后解决</strong>。</p><p>问题2、使用conda环境打包时，打包后的exe文件打开后提示无法引用pyqt5。</p><p>解决：<strong>使用 –path 将pyqt5的runw.exe地址手动传入。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller --path=d:\software\Anaconda3\envs\pytorch\Lib\site-packages\PyInstal ler\bootloader\Windows-64bit-intel\runw.exe -w pyqt.py</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch设置随机数</title>
      <link href="/2024/01/19/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951-pytorch%E8%AE%BE%E7%BD%AE%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
      <url>/2024/01/19/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951-pytorch%E8%AE%BE%E7%BD%AE%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>目录：</p><p>[TOC]</p><h3 id="学习目的："><a href="#学习目的：" class="headerlink" title="学习目的："></a>学习目的：</h3><p>通过设置随机种子，使训练结果可复现，有效对比模型测试结果；</p><h3 id="pytorch如何设置："><a href="#pytorch如何设置：" class="headerlink" title="pytorch如何设置："></a>pytorch如何设置：</h3><p>训练过程中的随机数包含：初始权重、随机数据增强、数据读取顺序等，将这些随机数固定，按理可保证训练结果一致。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置随机种子</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_seed</span>(<span class="params">seed</span>):</span></span><br><span class="line">    random.seed(seed)</span><br><span class="line">    np.random.seed(seed)</span><br><span class="line">    torch.manual_seed(seed)</span><br><span class="line">    torch.cuda.manual_seed(seed)</span><br><span class="line">    torch.cuda.manual_seed_all(seed)</span><br><span class="line">    torch.backends.cudnn.deterministic = <span class="literal">True</span>   </span><br><span class="line">    torch.backends.cudnn.benchmark = <span class="literal">False</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置Dataloader的种子</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_random_Dataloader</span>(<span class="params">worker_id, rank, seed</span>):</span></span><br><span class="line">    worker_seed = rank + seed</span><br><span class="line">    random.seed(worker_seed)</span><br><span class="line">    np.random.seed(worker_seed)</span><br><span class="line">    torch.manual_seed(worker_seed)</span><br><span class="line"></span><br><span class="line">set_seed(<span class="number">30</span>)</span><br><span class="line">set_random_Dataloader()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预处理、训练模型</span></span><br></pre></td></tr></table></figure><p> 参考：<a href="https://blog.csdn.net/weixin_44791964/article/details/131622957">https://blog.csdn.net/weixin_44791964/article/details/131622957</a></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023-AI事件回顾</title>
      <link href="/2024/01/09/2023-AI%E4%BA%8B%E4%BB%B6%E5%9B%9E%E9%A1%BE/"/>
      <url>/2024/01/09/2023-AI%E4%BA%8B%E4%BB%B6%E5%9B%9E%E9%A1%BE/</url>
      
        <content type="html"><![CDATA[<p>基础：22年11月30日，ChatGPT横空出世</p><p>23年2月：</p><ol><li>ChatGPT plus 版本上线；</li><li>微软宣布将ChatGPT功能集成到New Bing；</li><li>Meta发布LLaMa</li></ol><p>23年3月：</p><ol><li>OpenAI推出ChatGPT API；</li><li>OpenAI发布GPT-4</li><li>百度发布文心一言</li></ol><p>23年4月： </p><ol><li>Meta发布Segment Anything</li></ol><p>23年5月：</p><ol><li>特斯拉人形机器人（流畅行走、抓取物体）</li></ol><p>===============</p><p>23年6月：</p><ol><li>Runway Gen-2</li></ol><p>23年7月：</p><ol><li>Llama2开源；</li><li> overflow AI</li></ol><p>23年9月：</p><ol><li>OpenAI将DALL.E 1升级至DALL.E 3；</li><li>微软 EvoDiff；</li><li>HeyGen；</li><li>特斯拉Optimus可自主对物体进行分类（端到端训练）。</li></ol><p>23年10月：</p><ol><li>文心大模型4.0发布</li></ol><p>23年11月：</p><ol><li>Pika 1.0发布</li></ol><p>23年12月：</p><ol><li>谷歌DeepMind发布Gemini模型；</li><li>Mixtral AI开源了一个Mixtral 8x7B MoE模型；</li><li>MidJounery V6发布</li></ol><p>整体领域：AIGC</p><p>细分方向：图像生成（Midjourney、DALL-E3、Shutterstock AI）、视频生成（HeyGen、Runway Gen-2、Pika）、文本生成（Gemini、overflowAI、Llama、GPT-4）、图像分割（SAM）</p><p>发展：</p><ol><li>图像生成：GAN&rarr;DiffusionModel（扩散模型）&rarr;stable Diffusion（文本生成图像）</li><li>文本生成：RNN&rarr;Transformer&rarr;GPT</li></ol><p>应用：</p><p><img src="aigc.png" alt="应用："></p><p>图片来源：TE智库《企业AIGC商业落地应用研究报告》</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
